// routes/predictions.js - –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö" –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
const express = require('express');
const router = express.Router();
const { generatePrediction, getCryptoPrices } = require('../services/aiService');
const Prediction = require('../models/Prediction');

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã)
router.get('/', async (req, res) => {
  try {
    console.log('üìä –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –°–º–µ–ª—ã–π —Ö–æ–¥!');
    const predictions = await Prediction.find()
      .sort({ createdAt: -1 })
      .limit(10);
    
    res.json(predictions);
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –û–Ω–∏ —Ç–∞–∫ –∂–µ –Ω–∞–¥–µ–∂–Ω—ã, –∫–∞–∫ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –±–∏—Ä–∂–∏:', error);
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞—à–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Magic 8-Ball –≤–º–µ—Å—Ç–æ –Ω–∞—Å.',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ = —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞)
router.post('/generate', async (req, res) => {
  try {
    console.log('üßô‚Äç‚ôÇÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...');
    const { crypto } = req.body;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª—É—á–∞–π–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    let cryptoData;
    if (crypto) {
      cryptoData = crypto;
      console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è ${crypto.name}. –ö–∞–∫ –±—É–¥—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ–Ω–æ –±—ã–ª–æ –±—ã —Ç–æ—á–Ω–µ–µ!`);
    } else {
      console.log('üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –í—ã–±–∏—Ä–∞–µ–º –∂–µ—Ä—Ç–≤—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º...');
      const cryptoList = await getCryptoPrices();
      const randomIndex = Math.floor(Math.random() * Math.min(20, cryptoList.length));
      cryptoData = cryptoList[randomIndex];
      console.log(`üéØ –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–ª–∏ ${cryptoData.name}. –ë–µ–¥–Ω—è–≥–∞ –¥–∞–∂–µ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç, —á—Ç–æ –º—ã –æ –Ω–µ–º —Å–∫–∞–∂–µ–º.`);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Å—Ç–æ–ª—å –∂–µ –Ω–∞—É—á–Ω–æ–µ, –∫–∞–∫ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ)
    const prediction = await generatePrediction(cryptoData);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—à–µ–π "—Ç–æ—á–Ω–æ—Å—Ç–∏")
    const newPrediction = new Prediction({
      cryptoName: cryptoData.name,
      cryptoSymbol: cryptoData.symbol,
      currentPrice: cryptoData.current_price,
      sarcasticPrediction: prediction.text,
      confidence: prediction.confidence,
      analysis: prediction.analysis
    });
    
    await newPrediction.save();
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –æ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ "—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ"!');
    
    res.status(201).json(newPrediction);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ù–∞—à —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä —Ç—Ä–µ—Å–Ω—É–ª:', error);
    res.status(500).json({ 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –±—É–¥—É—â–µ–µ —Å–ª–∏—à–∫–æ–º –º—Ä–∞—á–Ω–æ –¥–∞–∂–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –ò–ò.',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error',
      suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É. –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞ –∂–µ, –Ω–æ –¥–µ—à–µ–≤–ª–µ.'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –º—ã –∑–¥–µ—Å—å –Ω–µ –≤—Ä–µ–º... –ø–æ—á—Ç–∏)
router.get('/crypto-data', async (req, res) => {
  try {
    console.log('üîç –ö—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –¢–∞–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!');
    const { start = 0, limit = 10 } = req.query;
    const startIndex = parseInt(start);
    const limitCount = parseInt(limit);
    
    const cryptoData = await getCryptoPrices();
    const slicedData = cryptoData.slice(startIndex, startIndex + limitCount);
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ ${slicedData.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ—é—Ç –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.`);
    res.json(slicedData);
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –†—ã–Ω–æ–∫ –≤ —Ö–∞–æ—Å–µ (–∫–∞–∫ –æ–±—ã—á–Ω–æ):', error);
    res.status(500).json({ 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –≤ —ç—Ç–æ–º –º—ã –Ω–µ –æ—Ç–ª–∏—á–∞–µ–º—Å—è –æ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—á—Ç–æ–±—ã –ø–æ—Å–º–µ—è—Ç—å—Å—è –¥–≤–∞–∂–¥—ã)
router.get('/:id', async (req, res) => {
  try {
    console.log(`üîç –ö—Ç–æ-—Ç–æ –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ #${req.params.id}. –í–∏–¥–∏–º–æ, —Ö–æ—á–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ –±—ã–ª–æ –Ω–µ—Ç–æ—á–Ω—ã–º.`);
    const prediction = await Prediction.findById(req.params.id);
    
    if (!prediction) {
      console.log('‚ùì –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–Ω–æ –∏—Å—á–µ–∑–ª–æ —Ç–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ, –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å –Ω–∞ –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ.');
      return res.status(404).json({ message: '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–Ω–æ –∏—Å—á–µ–∑–ª–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –∏–∑ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞.' });
    }
    
    console.log('‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–æ —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–æ!');
    res.json(prediction);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ù–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∞—è –∂–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –∫–∞–∫ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫:', error);
    res.status(500).json({ 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ú–æ–∂–µ—Ç, –æ–Ω–æ —Å–±—ã–ª–æ—Å—å –∏ –Ω–∞–º —Å—Ç–∞–ª–æ —Å—Ç—ã–¥–Ω–æ?',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
});

module.exports = router;

