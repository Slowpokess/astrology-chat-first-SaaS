{"ast":null,"code":"// client/src/services/apiService.js\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Получение данных о криптовалютах\nexport const fetchLatestCryptoData = async (start = 0, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/predictions/crypto-data`, {\n      params: {\n        start,\n        limit\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching crypto data:', error);\n    throw error;\n  }\n};\n\n// Обеспечиваем обратную совместимость\nexport const getCryptoPrices = fetchLatestCryptoData;\n\n// Генерация сатирического предсказания\nexport const generateSarcasticPrediction = async crypto => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/predictions/generate`, {\n      crypto\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating prediction:', error);\n    throw error;\n  }\n};\n\n// Анализ криптопортфеля\nexport const analyzePortfolio = async portfolio => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/portfolio/analyze`, {\n      portfolio\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error analyzing portfolio:', error);\n    throw error;\n  }\n};\n\n// Генерация ретроактивного \"гения\"\nexport const generateRetroGenius = async cryptoId => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/retrogen/generate`, {\n      cryptoId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating retro genius:', error);\n    throw error;\n  }\n};\n\n// Генерация астрологического графика\nexport const generateAstrologicalChart = async (cryptoId, timeframe) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/astrology/chart`, {\n      cryptoId,\n      timeframe\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating astrological chart:', error);\n    throw error;\n  }\n};\n\n// Получение индекса доверия\nexport const getTrustIndex = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/trust-index`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trust index:', error);\n    throw error;\n  }\n};\n\n// Получение истории индекса доверия\nexport const getTrustIndexHistory = async (days = 30) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/trust-index/history`, {\n      params: {\n        days\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trust index history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","fetchLatestCryptoData","start","limit","response","get","params","data","error","console","getCryptoPrices","generateSarcasticPrediction","crypto","post","analyzePortfolio","portfolio","generateRetroGenius","cryptoId","generateAstrologicalChart","timeframe","getTrustIndex","getTrustIndexHistory","days"],"sources":["/Users/macbook/Documents/ass-plattform/client/src/services/apiService.js"],"sourcesContent":["// client/src/services/apiService.js\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Получение данных о криптовалютах\nexport const fetchLatestCryptoData = async (start = 0, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/predictions/crypto-data`, {\n      params: { start, limit }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching crypto data:', error);\n    throw error;\n  }\n};\n\n// Обеспечиваем обратную совместимость\nexport const getCryptoPrices = fetchLatestCryptoData;\n\n// Генерация сатирического предсказания\nexport const generateSarcasticPrediction = async (crypto) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/predictions/generate`, { crypto });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating prediction:', error);\n    throw error;\n  }\n};\n\n// Анализ криптопортфеля\nexport const analyzePortfolio = async (portfolio) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/portfolio/analyze`, { portfolio });\n    return response.data;\n  } catch (error) {\n    console.error('Error analyzing portfolio:', error);\n    throw error;\n  }\n};\n\n// Генерация ретроактивного \"гения\"\nexport const generateRetroGenius = async (cryptoId) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/retrogen/generate`, { cryptoId });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating retro genius:', error);\n    throw error;\n  }\n};\n\n// Генерация астрологического графика\nexport const generateAstrologicalChart = async (cryptoId, timeframe) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/astrology/chart`, { \n      cryptoId, \n      timeframe \n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error generating astrological chart:', error);\n    throw error;\n  }\n};\n\n// Получение индекса доверия\nexport const getTrustIndex = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/trust-index`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trust index:', error);\n    throw error;\n  }\n};\n\n// Получение истории индекса доверия\nexport const getTrustIndexHistory = async (days = 30) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/trust-index/history`, {\n      params: { days }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching trust index history:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}